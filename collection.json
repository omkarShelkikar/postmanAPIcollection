{
	"info": {
		"_postman_id": "a1fc8aff-b7df-4c34-9138-8e4e45527ff3",
		"name": "GOAL TRACKER - API",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "30580213"
	},
	"item": [
		{
			"name": "Login",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = JSON.parse(responseBody);\r",
							"var token = jsonData.token;\r",
							"console.log(token)\r",
							"pm.environment.set(\"access_token\", token);\r",
							"pm.test(\"Response status code is 200\", function () {\r",
							"  pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"email\": \"bloddy_marry@example.com\",\r\n    \"password\": \"Password123!\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseurl}}/auth/login",
					"host": [
						"{{baseurl}}"
					],
					"path": [
						"auth",
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "GET-Status",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"validate Status code is 200\", ()=> {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Body matches string\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"OPERATIONAL\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseurl}}/status",
					"host": [
						"{{baseurl}}"
					],
					"path": [
						"status"
					]
				}
			},
			"response": []
		},
		{
			"name": "RegiesterRequest",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"validate resposne status and response data\", function () {\r",
							" if(pm.response.code === 201)\r",
							" {\r",
							"    pm.response.to.have.status(201);\r",
							"    var responseJSON = pm.response.json();\r",
							"    pm.expect(responseJSON).to.have.property('user');\r",
							"    pm.expect(responseJSON.user).to.have.property('name');\r",
							"    pm.expect(responseJSON.user).to.have.property('email');\r",
							" }\r",
							" else \r",
							"   {\r",
							"    pm.expect(pm.response.code).to.equal(400);\r",
							"    var responseJSON = pm.response.json();\r",
							"    pm.expect(responseJSON).to.have.property('msg').and.to.not.be.empty;\r",
							"    pm.expect(responseJSON.msg).to.equal(\"Email address already exists\");\r",
							"   }\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"Bloody Marry2\",\r\n    \"email\": \"bloddy_marry2@example.com\",\r\n    \"password\": \"Password123!\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseurl}}/auth/register",
					"host": [
						"{{baseurl}}"
					],
					"path": [
						"auth",
						"register"
					]
				}
			},
			"response": []
		},
		{
			"name": "GetAllGoals",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"console.log(\"Before\")\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"pm.test(\"All goals have a title\", function () {\r",
							"    pm.response.json().goals.forEach(function(goal) {\r",
							"        pm.expect(goal).to.have.property('title');\r",
							"        console.log(goal.title);\r",
							"    });\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{access_token}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseurl}}/goals",
					"host": [
						"{{baseurl}}"
					],
					"path": [
						"goals"
					],
					"query": [
						{
							"key": "status",
							"value": "cancelled",
							"disabled": true
						},
						{
							"key": "priority",
							"value": "medium",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Post Goal",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Test to check for the status code of the response\r",
							"\r",
							"pm.test(\"Response status code is 201\", function () {\r",
							"  pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response time is less than 300ms\", function () {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(500);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response has the required fields\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"\r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData).to.have.property('goal');\r",
							"    \r",
							"    const goal = responseData.goal;\r",
							"    pm.expect(goal).to.include.all.keys('title', 'description', 'status', 'priority', 'createdBy', '_id', 'createdAt');\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Title is a non-empty string\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  pm.expect(responseData).to.be.an('object');\r",
							"  pm.expect(responseData.goal.title).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Title should not be empty\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Content-Type header is application/json\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{access_token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"title\": \"{{$randomWords}}\",\r\n    \"description\": \"{{$randomLoremSentence}}\",\r\n    \"priority\": \"low\",\r\n    \"status\": \"to-do\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseurl}}/goals",
					"host": [
						"{{baseurl}}"
					],
					"path": [
						"goals"
					]
				}
			},
			"response": []
		},
		{
			"name": "GET_SingleGoals",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {\r",
							"  pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response Content-Type is application/json\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Goal object has the required fields\", function () {\r",
							"    const responseData = pm.response.json().goal;\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData._id).to.exist;\r",
							"    pm.expect(responseData.title).to.exist;\r",
							"    pm.expect(responseData.description).to.exist;\r",
							"    pm.expect(responseData.status).to.exist;\r",
							"    pm.expect(responseData.priority).to.exist;\r",
							"    pm.expect(responseData.createdBy).to.exist;\r",
							"    pm.expect(responseData.createdAt).to.exist;\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Title and description must be non-empty strings\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  \r",
							"  pm.expect(responseData).to.be.an('object');\r",
							"  pm.expect(responseData.goal.title).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Title should not be empty\");\r",
							"  pm.expect(responseData.goal.description).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Description should not be empty\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Status is in a valid format\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.goal.status).to.be.a('string');\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"CreatedAt is a valid date format\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.goal.createdAt).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}.\\d{3}Z$/);\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{access_token}}",
						"type": "text"
					},
					{
						"key": "Authorization",
						"value": "ABC",
						"type": "text",
						"disabled": true
					}
				],
				"url": {
					"raw": "{{baseurl}}/goals/:id",
					"host": [
						"{{baseurl}}"
					],
					"path": [
						"goals",
						":id"
					],
					"variable": [
						{
							"key": "id",
							"value": "67e76b4186d5b4933c143b7e"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Update_goal",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {\r",
							"  pm.response.to.have.status(200);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{access_token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"title\": \"Enroll on 'Udemy API Course-Updated'\",\r\n    \"description\": \"Upated desciption.\",\r\n    \"status\": \"cancelled\",\r\n    \"priority\": \"medium\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseurl}}/goals/:id",
					"host": [
						"{{baseurl}}"
					],
					"path": [
						"goals",
						":id"
					],
					"variable": [
						{
							"key": "id",
							"value": "67e76b4186d5b4933c143b7e"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "show_progress",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"console.log(\"Before script start\")\r",
							"pm.globals.set('globalvarname','globalvarvalue')\r",
							"console.log(pm.globals.get('globalvarname'))"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"console.log(\"AFter test execute\")\r",
							"pm.test(\"Response status code is 200\", function () {\r",
							"  pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{access_token}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseurl}}/goals/showprogress",
					"host": [
						"{{baseurl}}"
					],
					"path": [
						"goals",
						"showprogress"
					]
				}
			},
			"response": []
		}
	]
}